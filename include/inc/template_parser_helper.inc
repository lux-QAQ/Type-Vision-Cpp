// This file is generated by template_parser_helper.py. DO NOT EDIT.

// --- 1 argument ---
template <template <typename> class C, typename T1>
struct template_parser_helper<C<T1>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>>;
};

template <template <auto> class C, auto V1>
struct template_parser_helper<C<V1>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>>;
};


// --- 2 arguments ---
template <template <typename, typename> class C, typename T1, typename T2>
struct template_parser_helper<C<T1, T2>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>>;
};

template <template <auto, typename> class C, auto V1, typename T2>
struct template_parser_helper<C<V1, T2>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>>;
};

template <template <typename, auto> class C, typename T1, auto V2>
struct template_parser_helper<C<T1, V2>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>>;
};

template <template <auto, auto> class C, auto V1, auto V2>
struct template_parser_helper<C<V1, V2>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>>;
};


// --- 3 arguments ---
template <template <typename, typename, typename> class C, typename T1, typename T2, typename T3>
struct template_parser_helper<C<T1, T2, T3>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>>;
};

template <template <auto, typename, typename> class C, auto V1, typename T2, typename T3>
struct template_parser_helper<C<V1, T2, T3>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>>;
};

template <template <typename, auto, typename> class C, typename T1, auto V2, typename T3>
struct template_parser_helper<C<T1, V2, T3>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>>;
};

template <template <auto, auto, typename> class C, auto V1, auto V2, typename T3>
struct template_parser_helper<C<V1, V2, T3>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>>;
};

template <template <typename, typename, auto> class C, typename T1, typename T2, auto V3>
struct template_parser_helper<C<T1, T2, V3>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>>;
};

template <template <auto, typename, auto> class C, auto V1, typename T2, auto V3>
struct template_parser_helper<C<V1, T2, V3>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>>;
};

template <template <typename, auto, auto> class C, typename T1, auto V2, auto V3>
struct template_parser_helper<C<T1, V2, V3>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>>;
};

template <template <auto, auto, auto> class C, auto V1, auto V2, auto V3>
struct template_parser_helper<C<V1, V2, V3>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>>;
};


// --- 4 arguments ---
template <template <typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4>
struct template_parser_helper<C<T1, T2, T3, T4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>>;
};

template <template <auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4>
struct template_parser_helper<C<V1, T2, T3, T4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>>;
};

template <template <typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4>
struct template_parser_helper<C<T1, V2, T3, T4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>>;
};

template <template <auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4>
struct template_parser_helper<C<V1, V2, T3, T4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>>;
};

template <template <typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4>
struct template_parser_helper<C<T1, T2, V3, T4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>>;
};

template <template <auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4>
struct template_parser_helper<C<V1, T2, V3, T4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>>;
};

template <template <typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4>
struct template_parser_helper<C<T1, V2, V3, T4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>>;
};

template <template <auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4>
struct template_parser_helper<C<V1, V2, V3, T4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>>;
};

template <template <typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4>
struct template_parser_helper<C<T1, T2, T3, V4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>>;
};

template <template <auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4>
struct template_parser_helper<C<V1, T2, T3, V4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>>;
};

template <template <typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4>
struct template_parser_helper<C<T1, V2, T3, V4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>>;
};

template <template <auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4>
struct template_parser_helper<C<V1, V2, T3, V4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>>;
};

template <template <typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4>
struct template_parser_helper<C<T1, T2, V3, V4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>>;
};

template <template <auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4>
struct template_parser_helper<C<V1, T2, V3, V4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>>;
};

template <template <typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4>
struct template_parser_helper<C<T1, V2, V3, V4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>>;
};

template <template <auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4>
struct template_parser_helper<C<V1, V2, V3, V4>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>>;
};


// --- 5 arguments ---
template <template <typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5>
struct template_parser_helper<C<T1, T2, T3, T4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>>;
};

template <template <auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5>
struct template_parser_helper<C<V1, T2, T3, T4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>>;
};

template <template <typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5>
struct template_parser_helper<C<T1, V2, T3, T4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>>;
};

template <template <auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5>
struct template_parser_helper<C<V1, V2, T3, T4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>>;
};

template <template <typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5>
struct template_parser_helper<C<T1, T2, V3, T4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>>;
};

template <template <auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5>
struct template_parser_helper<C<V1, T2, V3, T4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>>;
};

template <template <typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5>
struct template_parser_helper<C<T1, V2, V3, T4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>>;
};

template <template <auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5>
struct template_parser_helper<C<V1, V2, V3, T4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>>;
};

template <template <typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5>
struct template_parser_helper<C<T1, T2, T3, V4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>>;
};

template <template <auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5>
struct template_parser_helper<C<V1, T2, T3, V4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>>;
};

template <template <typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5>
struct template_parser_helper<C<T1, V2, T3, V4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>>;
};

template <template <auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5>
struct template_parser_helper<C<V1, V2, T3, V4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>>;
};

template <template <typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5>
struct template_parser_helper<C<T1, T2, V3, V4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>>;
};

template <template <auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5>
struct template_parser_helper<C<V1, T2, V3, V4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>>;
};

template <template <typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5>
struct template_parser_helper<C<T1, V2, V3, V4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>>;
};

template <template <auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5>
struct template_parser_helper<C<V1, V2, V3, V4, T5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>>;
};

template <template <typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5>
struct template_parser_helper<C<T1, T2, T3, T4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>>;
};

template <template <auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5>
struct template_parser_helper<C<V1, T2, T3, T4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>>;
};

template <template <typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5>
struct template_parser_helper<C<T1, V2, T3, T4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>>;
};

template <template <auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5>
struct template_parser_helper<C<V1, V2, T3, T4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>>;
};

template <template <typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5>
struct template_parser_helper<C<T1, T2, V3, T4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>>;
};

template <template <auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5>
struct template_parser_helper<C<V1, T2, V3, T4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>>;
};

template <template <typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5>
struct template_parser_helper<C<T1, V2, V3, T4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>>;
};

template <template <auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5>
struct template_parser_helper<C<V1, V2, V3, T4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>>;
};

template <template <typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5>
struct template_parser_helper<C<T1, T2, T3, V4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>>;
};

template <template <auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5>
struct template_parser_helper<C<V1, T2, T3, V4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>>;
};

template <template <typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5>
struct template_parser_helper<C<T1, V2, T3, V4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>>;
};

template <template <auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5>
struct template_parser_helper<C<V1, V2, T3, V4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>>;
};

template <template <typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5>
struct template_parser_helper<C<T1, T2, V3, V4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>>;
};

template <template <auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5>
struct template_parser_helper<C<V1, T2, V3, V4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>>;
};

template <template <typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5>
struct template_parser_helper<C<T1, V2, V3, V4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>>;
};

template <template <auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5>
struct template_parser_helper<C<V1, V2, V3, V4, V5>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>>;
};


// --- 6 arguments ---
template <template <typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>>;
};

template <template <typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>>;
};

template <template <typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>>;
};

template <template <typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>>;
};

template <template <auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>>;
};


// --- 7 arguments ---
template <template <typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>>;
};


// --- 8 arguments ---
template <template <typename, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>>;
};


// --- 9 arguments ---
template <template <typename, typename, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, T9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, V9>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>>;
};


// --- 10 arguments ---
template <template <typename, typename, typename, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, T9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, V9, T10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, T9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, V9, V10>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>>;
};


// --- 11 arguments ---
template <template <typename, typename, typename, typename, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, typename, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, typename, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, T9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, auto, typename, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, auto, typename, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, V9, T10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, typename, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, typename, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, T9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, auto, auto, typename> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, auto, auto, typename> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, typename T11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, T11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, type_wrapper<T11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, typename, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, typename, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, T9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, auto, typename, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, auto, typename, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, typename T10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, V9, T10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, type_wrapper<T10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, typename, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, typename, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, typename T9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, T9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, type_wrapper<T9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, typename, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, typename, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, typename T8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, T8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, type_wrapper<T8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, typename, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, typename, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, typename T7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, T7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, type_wrapper<T7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, typename, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, typename, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, typename T6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, T6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, type_wrapper<T6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, typename, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, typename, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, typename T5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, T5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, type_wrapper<T5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, typename, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, T4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, typename, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, T4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, typename, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, T4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, typename, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, T4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, typename, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, T4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, typename, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, T4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, typename, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, T4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, typename, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, typename T4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, T4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, type_wrapper<T4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, typename, auto, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, T3, V4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, typename, auto, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, T3, V4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, typename, auto, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, T3, V4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, typename, auto, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, typename T3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, T3, V4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, type_wrapper<T3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, typename, auto, auto, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, T2, V3, V4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, typename, auto, auto, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, typename T2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, T2, V3, V4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, type_wrapper<T2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <typename, auto, auto, auto, auto, auto, auto, auto, auto, auto, auto> class C, typename T1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<T1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<type_wrapper<T1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};

template <template <auto, auto, auto, auto, auto, auto, auto, auto, auto, auto, auto> class C, auto V1, auto V2, auto V3, auto V4, auto V5, auto V6, auto V7, auto V8, auto V9, auto V10, auto V11>
struct template_parser_helper<C<V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11>>
{
    static constexpr bool is_specialization = true;
    using args_as_tuple = std::tuple<value_wrapper<V1>, value_wrapper<V2>, value_wrapper<V3>, value_wrapper<V4>, value_wrapper<V5>, value_wrapper<V6>, value_wrapper<V7>, value_wrapper<V8>, value_wrapper<V9>, value_wrapper<V10>, value_wrapper<V11>>;
};



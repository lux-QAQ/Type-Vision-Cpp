# generate_parsers.py
def generate_member_function_parsers():
    """
    Generates C++ template specializations for all member function pointer qualifiers.
    """
    # 定义所有可能的限定符
    cv_qualifiers = [
        ("", {"const": False, "volatile": False}),
        (" const", {"const": True, "volatile": False}),
        (" volatile", {"const": False, "volatile": True}),
        (" const volatile", {"const": True, "volatile": True}),
    ]

    ref_qualifiers = [
        ("", {"lvalue": False, "rvalue": False}),
        (" &", {"lvalue": True, "rvalue": False}),
        (" &&", {"lvalue": False, "rvalue": True}),
    ]

    noexcept_qualifiers = [
        ("", {"noexcept": False}),
        (" noexcept", {"noexcept": True}),
    ]

    # C++ 模板字符串
    template = """template <typename R, typename C, typename... Args>
struct Parser<R (C::*)({args}){qualifiers}>
{{
    using type = StaticMemberFunctionPointer<typename Parser<C>::type, typename Parser<R>::type, std::tuple<typename Parser<Args>::type...>, Qualifiers<{is_const}, {is_volatile}, {is_lvalue}, {is_rvalue}, {is_noexcept}>>;
}};"""

    output = []
    output.append("// This file is generated by generate_parsers.py. DO NOT EDIT MANUALLY.\n")

    for cv_text, cv_flags in cv_qualifiers:
        for ref_text, ref_flags in ref_qualifiers:
            for noexcept_text, noexcept_flags in noexcept_qualifiers:
                
                # 基础的无限定符版本已经在 parser.hpp 中定义，跳过以避免重定义
                if not cv_text and not ref_text and not noexcept_text:
                    continue

                qualifiers_str = f"{cv_text}{ref_text}{noexcept_text}"
                
                # C++ 要求限定符按特定顺序排列: cv -> ref -> noexcept
                # 我们的循环已经保证了这个顺序
                
                # 组合所有布尔标志
                all_flags = {**cv_flags, **ref_flags, **noexcept_flags}

                # 格式化模板
                specialization = template.format(
                    args="Args...",
                    qualifiers=qualifiers_str,
                    is_const=str(all_flags["const"]).lower(),
                    is_volatile=str(all_flags["volatile"]).lower(),
                    is_lvalue=str(all_flags["lvalue"]).lower(),
                    is_rvalue=str(all_flags["rvalue"]).lower(),
                    is_noexcept=str(all_flags["noexcept"]).lower(),
                )
                output.append(specialization)

    return "\n".join(output)

if __name__ == "__main__":
    # 你可以将输出重定向到文件: python generate_parsers.py > include/inc/member_function_parser.inc
    generated_code = generate_member_function_parsers()
    print(generated_code)
